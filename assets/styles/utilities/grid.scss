//@layer layout {
    .grid {
        --grid-min: 15ch;
        --grid-gap: 3vw;

        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--grid-min)), 1fr));
        gap: var(--grid-gap);
    }

    /**
        Note: There is a bug as of Safari 16.4 where using containment
        on a grid using auto-fit collapses widths to zero, so proceed
        with caution if you use this strategy before the bug is resolved.
     */
    //:is(.grid, .flex) > * {
    //    container: var(--grid-item-container, grid-item) / inline-size;
    //}

    .grid-breakout {
        --breakout-size: minmax(0, ((var(--breakout-max-width) - var(--content-max-width)) / var(--breakout-factor, 1)));
        --feature-size: minmax(0, ((var(--feature-max-width) - var(--content-max-width)) / (var(--breakout-factor, 1) * 2 )));
        --feature-side-size: minmax(var(--padding-inline), ((var(--feature-max-width) - var(--content-max-width)) / (var(--breakout-factor, 1) * 2 )));
        --full-width-size: minmax(var(--padding-inline), 1fr);
        --content-size: min(100% - (var(--padding-inline) * 2), var(--content-max-width));

        display: grid;
        grid-template-columns:
            [full-width-start] minmax(var(--padding-inline), 1fr)
            [feature-start] minmax(0, var(--feature-size))
            [breakout-start] minmax(0, var(--breakout-size))
            [content-start] min(100% - (var(--padding-inline) * 2), var(--content-max-width))
            [content-end]
            minmax(0, var(--breakout-size)) [breakout-end]
            minmax(0, var(--feature-size)) [feature-end]
            minmax(var(--padding-inline), 1fr) [full-width-end];
    }

    .grid-breakout.feature-left {
        display: grid;
        grid-template-columns:
            [full-width-start] var(--full-width-size)
            [feature-start] var(--feature-size)
            [breakout-start] var(--breakout-size)
            [content-start] var(--content-size) [content-end]
            var(--breakout-size) [breakout-end]
            var(--feature-side-size) [feature-end full-width-end];
    }
    .grid-breakout.feature-right {
        display: grid;
        grid-template-columns:
            [full-width-start feature-start] var(--feature-side-size)
            [breakout-start] var(--breakout-size)
            [content-start] var(--content-size) [content-end]
            var(--breakout-size) [breakout-end]
            var(--feature-size) [feature-end]
            var(--full-width-size) [full-width-end];
    }

    .grid-breakout > * {
        grid-column: content;
    }

    .breakout {
        grid-column: breakout;
    }

    .feature {
        grid-column: feature;
    }

    .feature-left {
        grid-column: full-width-start / feature-end;
    }

    .feature-right {
        grid-column: feature-start / full-width-end;
    }

    .full-width {
        grid-column: full-width;
    }
//}